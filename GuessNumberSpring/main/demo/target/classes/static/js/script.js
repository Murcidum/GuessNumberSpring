document.addEventListener('DOMContentLoaded', () => {
    const API_BASE_URL = '/api/game';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
    const elements = {
        startButton: document.getElementById('startButton'),
        checkButton: document.getElementById('checkButton'),
        newGameButton: document.getElementById('newGameButton'),
        inputA: document.getElementById('inputA'),
        inputB: document.getElementById('inputB'),
        guessInput: document.getElementById('guessInput'),
        setupSection: document.getElementById('setupSection'),
        gameSection: document.getElementById('gameSection'),
        message: document.getElementById('message'),
        remainingAttempts: document.getElementById('remainingAttempts'),
        history: document.getElementById('history'),
        rulesBlock: document.getElementById('rulesBlock')
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    function init() {
        setupEventListeners();
        updateRulesDisplay();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    function setupEventListeners() {
        elements.startButton.addEventListener('click', startGameHandler);
        elements.checkButton.addEventListener('click', handleGuess);
        elements.newGameButton.addEventListener('click', endGame);
        elements.inputA.addEventListener('input', updateRulesDisplay);
        elements.inputB.addEventListener('input', updateRulesDisplay);
        elements.guessInput.addEventListener('keypress', e => {
            if(e.key === 'Enter') handleGuess();
        });
    }
    console.log('–≠–ª–µ–º–µ–Ω—Ç startButton:', document.getElementById('startButton'));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø—Ä–∞–≤–∏–ª
    function updateRulesDisplay() {
        const min = parseInt(elements.inputA.value) || 0;
        const max = parseInt(elements.inputB.value) || 0;
        const isValid = min < max;
        const attempts = isValid ? Math.ceil(Math.log2(max - min + 1)) : '?';

        elements.rulesBlock.innerHTML = `
            <h4 class="alert-heading">üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</h4>
            <ol class="mb-0">
                <li>–ó–∞–¥–∞–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª [${min}; ${max}]</li>
                ${isValid ? `
                <li>–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ</li>
                <li>–£ –≤–∞—Å –±—É–¥–µ—Ç <strong>${attempts}</strong> –ø–æ–ø—ã—Ç–æ–∫</li>
                ` : `
                <li class="text-danger">‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞</li>
                `}
                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:
                    <ul class="mt-1">
                        <li>üî∫ –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ –≤–∞—à–µ–π –ø–æ–ø—ã—Ç–∫–∏</li>
                        <li>üîª –ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ –≤–∞—à–µ–π –ø–æ–ø—ã—Ç–∫–∏</li>
                    </ul>
                </li>
            </ol>
        `;
    }

    async function sha256(message) {
        // –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Uint8Array
        const msgBuffer = new TextEncoder().encode(message);

        // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ArrayBuffer –≤ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
        const hashArray = Array.from(new Uint8Array(hashBuffer));

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ hex-—Å—Ç—Ä–æ–∫—É
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

        return hashHex;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    async function startGameHandler() {
        try {
            const min = parseInt(elements.inputA.value);
            const max = parseInt(elements.inputB.value);

            if(min >= max) {
                showMessage('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω', 'danger');
                return;
            }

            let checksum;
            await sha256(String(min) + String(max)).then(hash => checksum = hash);
            console.log(checksum);
            let bodyReq = JSON.stringify({ min, max, checksum });
            const response = await fetch(`${API_BASE_URL}/start`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: bodyReq
            });

            if(!response.ok) throw new Error(await response.text());

            const data = await response.json();
            currentGameId = data.gameId;

            elements.setupSection.classList.add('hidden');
            elements.gameSection.classList.remove('hidden');
            elements.guessInput.focus();
            updateGameUI(data);

        } catch(error) {
            handleApiError(error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥–∞—Ç—å
    async function handleGuess() {
        try {
            const guess = parseInt(elements.guessInput.value);

            if(isNaN(guess)) {
                showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', 'warning');
                return;
            }

            let checksum;
            await sha256(String(guess)).then(hash => checksum = hash);
            console.log(checksum);
            let bodyReq = JSON.stringify({
                guess,
                checksum
            });

            const response = await fetch(`${API_BASE_URL}/guess`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: bodyReq
            });

            if(!response.ok) throw new Error(await response.text());

            const data = await response.json();
            updateGameUI(data);

            if(data.gameOver) endGame();

        } catch(error) {
            handleApiError(error);
        } finally {
            elements.guessInput.value = '';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    function updateGameUI(data) {
        elements.remainingAttempts.textContent = data.remainingAttempts;
        if(data.remainingAttempts <= 0){
            document.getElementById('guessInput').setAttribute('disabled', 'disabled');
        } else {
            document.getElementById('guessInput').removeAttribute('disabled');
        }
        showMessage(data.message, data.gameOver ? 'danger' : 'info');
        updateHistory(data.history);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
    function updateHistory(history) {
        elements.history.innerHTML = history.map((attempt, index) => `
            <div class="alert ${getAttemptStyle(attempt.result)} mb-2">
                <div class="d-flex justify-content-between">
                    <span>#${index + 1}: ${attempt.number}</span>
                </div>
                <div class="mt-1">
                    ${attempt.result === 'CORRECT' ? 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' :
            attempt.result === 'LOW' ? 'üîª –ú–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ' :
                'üî∫ –ë–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ'}
                </div>
            </div>
        `).join('');
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    function endGame() {
        currentGameId = null;
        elements.setupSection.classList.remove('hidden');
        elements.gameSection.classList.add('hidden');
        elements.inputA.focus();
        elements.history.innerHTML = '';
        showMessage('', 'info');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function showMessage(text, style) {
        elements.message.textContent = text;
        elements.message.className = `alert alert-${style}`;
    }

    function getAttemptStyle(result) {
        return {
            'CORRECT': 'alert-success',
            'LOW': 'alert-warning',
            'HIGH': 'alert-danger'
        }[result];
    }

    function handleApiError(error) {
        console.error('API Error:', error);
        showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', 'danger');
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init();
});